program        → declaration* EOF ;

declaration    → varDecl
               | statement ;

varDecl        → "var" IDENTIFIER ( "=" expression )? ";" ;

statement      → exprStmt
               | ifStmt
               | printStmt
               | block ;
exprStmt       → expression ";" ;
ifStmt         → "if" "(" expression ")" statement ( "else" statement )? ;
printStmt      → "print" expression ";" ;
block          → "{" declaration* "}"

expression     → joined ;
joined         → assignment ( "," assignment )
               | join-error ;
join-error     → "," joined ;
assignment     → IDENTIFIER "=" assignment
               | assign-error
               | equality ;
assign-error   → "=" equality ;
equality       → comparison ( ( "!=" | "==" ) comparison )*
               | equal-error ;
equal-error    → ( "!=" | "==" ) equality ;
comparison     → addition ( ( ">" | ">=" | "<" | "<=" ) addition )*
               | compare-error ;
compare-error  → ( ">" | ">=" | "<" | "<=" ) comparison ;
addition       → multiplication ( ( "-" | "+" ) multiplication )*
               | add-error ;
add-error      → ( "+" ) addition ;
multiplication → unary ( ( "/" | "*" ) unary )* 
               | multply-error ;
multiply-error → ( "/" | "*" ) multiplication ;
unary          → "!" ("!")* unary
               | "-" ("-")* unary
               | primary ;
primary        → NUMBER | STRING | boolean | "nil"
               | "(" expression ")"
               | IDENTIFIER ;
